[
    {
        "id": "d117d1b62f7d086e",
        "type": "tab",
        "label": "Tradfri",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "1a8368cbbe1982c2",
        "type": "tab",
        "label": "Pi status",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "c54321938fa1bb97",
        "type": "tab",
        "label": "Flow 1",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "7827694ff4b0dc7d",
        "type": "tab",
        "label": "Flow 2",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "b2fb63b9d77e15a7",
        "type": "tradfri-config",
        "name": "tradfri config",
        "gatewayHost": "10.1.0.36",
        "identity": "tradfri_1645005107424",
        "preSharedKey": "TTtltDuaoNFmlZHX"
    },
    {
        "id": "3ea589fd2b313663",
        "type": "catch",
        "z": "d117d1b62f7d086e",
        "name": "",
        "scope": null,
        "uncaught": false,
        "x": 200,
        "y": 920,
        "wires": [
            [
                "04c6ca6dc91092d7"
            ]
        ]
    },
    {
        "id": "04c6ca6dc91092d7",
        "type": "debug",
        "z": "d117d1b62f7d086e",
        "name": "log",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 330,
        "y": 920,
        "wires": []
    },
    {
        "id": "f28bc0dc4af57029",
        "type": "status",
        "z": "d117d1b62f7d086e",
        "name": "",
        "scope": null,
        "x": 200,
        "y": 980,
        "wires": [
            [
                "42c920e8031cbe7c"
            ]
        ]
    },
    {
        "id": "94f9e5ca27ce82c1",
        "type": "http in",
        "z": "d117d1b62f7d086e",
        "name": "/tradfri/:device",
        "url": "/tradfri/:device",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 340,
        "y": 340,
        "wires": [
            [
                "039b8253b7696f59"
            ]
        ]
    },
    {
        "id": "7928829e1332e137",
        "type": "inject",
        "z": "d117d1b62f7d086e",
        "name": "Mirror lamps",
        "props": [
            {
                "p": "req.params",
                "v": "{\"device\": \"Mirror lamps\"}",
                "vt": "json"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 330,
        "y": 220,
        "wires": [
            [
                "039b8253b7696f59"
            ]
        ]
    },
    {
        "id": "6ea96e84ddc1fb55",
        "type": "tradfri-monitor",
        "z": "d117d1b62f7d086e",
        "gateway": "b2fb63b9d77e15a7",
        "name": "",
        "x": 70,
        "y": 680,
        "wires": [
            [
                "0768e54ac65e1ea0"
            ]
        ]
    },
    {
        "id": "4725435ee8826d82",
        "type": "debug",
        "z": "d117d1b62f7d086e",
        "name": "log",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 490,
        "y": 740,
        "wires": []
    },
    {
        "id": "0768e54ac65e1ea0",
        "type": "function",
        "z": "d117d1b62f7d086e",
        "name": "updateDeviceList",
        "func": "try {\n    const globalDeviceList = {};\n    const name = msg.payload.name.toLowerCase()\n    globalDeviceList[name] = msg.payload\n\n    const newList = {\n        ...global.get(\"globalDeviceList\") || {},\n        ...globalDeviceList\n    }\n\n\n    global.set(\"globalDeviceList\", newList);\n    return { msg, deviceList: newList };\n} catch (err) {\n    node.error(err)\n    return {msg, err}\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 680,
        "wires": [
            [
                "4725435ee8826d82",
                "d7b6dccd1d42e2c8"
            ]
        ]
    },
    {
        "id": "77f2a35b96e8c937",
        "type": "function",
        "z": "d117d1b62f7d086e",
        "name": "clearDeviceList",
        "func": "global.set(\"globalDeviceList\", undefined);\nreturn {info: \"Cleared globalDeviceList\"}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 760,
        "y": 980,
        "wires": [
            [
                "8974dc3c7d79bbde"
            ]
        ]
    },
    {
        "id": "8974dc3c7d79bbde",
        "type": "debug",
        "z": "d117d1b62f7d086e",
        "name": "log",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 950,
        "y": 980,
        "wires": []
    },
    {
        "id": "039b8253b7696f59",
        "type": "function",
        "z": "d117d1b62f7d086e",
        "name": "findAndToggle",
        "func": "function escapeRegExp(string) {\n    return string.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'); // $& means the whole matched string\n}\n\nfunction replaceAll(str, find, replace) {\n    return str.replace(new RegExp(escapeRegExp(find), 'g'), replace);\n}\n\nconst trimCommandString = (id) => ((id === 'all')\n    ? '' : replaceAll(id.replace(/the/g, '').trim().toLowerCase(), '_', ' '));\n\nconst toggle = (isOn) => (isOn ? \"off\" : \"on\")\n\nconst getIsOn = (deviceInfo, type) => ((type === 'group') ? deviceInfo.isOn : deviceInfo[type].isOn)\n\nfunction findAndToggle (input) {\n    const device = trimCommandString(\n        input.req.params.device.toLowerCase()\n    )\n    const deviceList = global.get(\"globalDeviceList\")\n    const deviceInfo = deviceList[device];\n    // node.warn(deviceList);\n    // node.warn(deviceInfo);\n\n    const type = deviceInfo.type\n    const isOn = getIsOn(deviceInfo, type)\n\n    return {\n        topic: deviceInfo.instanceId,\n        payload: toggle(isOn),\n        res: input.res\n    };\n}\n\ntry {\n    return findAndToggle(msg);\n} catch (err) {\n    node.error(err)\n    return {\n        payload: err.message,\n        res: msg.res,\n        statusCode: 500\n    }\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 340,
        "wires": [
            [
                "2e2c00ca72610f7c",
                "90b5126edab69b36",
                "69cec7f12a58fcb1"
            ]
        ]
    },
    {
        "id": "2e2c00ca72610f7c",
        "type": "debug",
        "z": "d117d1b62f7d086e",
        "name": "log",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 710,
        "y": 400,
        "wires": []
    },
    {
        "id": "039a1cb7fbd844db",
        "type": "inject",
        "z": "d117d1b62f7d086e",
        "name": "atFlowStart",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 570,
        "y": 980,
        "wires": [
            [
                "77f2a35b96e8c937"
            ]
        ]
    },
    {
        "id": "90b5126edab69b36",
        "type": "tradfri-switch-control",
        "z": "d117d1b62f7d086e",
        "gateway": "b2fb63b9d77e15a7",
        "name": "Update tradfri",
        "action": "",
        "accessories": [],
        "groups": [],
        "logInputErrors": true,
        "x": 740,
        "y": 340,
        "wires": []
    },
    {
        "id": "3bdafeedf173a283",
        "type": "inject",
        "z": "d117d1b62f7d086e",
        "name": "the_tall_sofa_lamp",
        "props": [
            {
                "p": "req.params",
                "v": "{\"device\": \"tall sofa lamp\"}",
                "vt": "json"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 310,
        "y": 180,
        "wires": [
            [
                "039b8253b7696f59"
            ]
        ]
    },
    {
        "id": "bb9e3ac33d04a87a",
        "type": "inject",
        "z": "d117d1b62f7d086e",
        "name": "living room",
        "props": [
            {
                "p": "req.params",
                "v": "{\"device\": \"living room\"}",
                "vt": "json"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 340,
        "y": 140,
        "wires": [
            [
                "039b8253b7696f59"
            ]
        ]
    },
    {
        "id": "69cec7f12a58fcb1",
        "type": "http response",
        "z": "d117d1b62f7d086e",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 710,
        "y": 280,
        "wires": []
    },
    {
        "id": "7a86746dfb115e20",
        "type": "comment",
        "z": "d117d1b62f7d086e",
        "name": "Debug nodes",
        "info": "",
        "x": 330,
        "y": 100,
        "wires": []
    },
    {
        "id": "4fd61c70026094f7",
        "type": "comment",
        "z": "d117d1b62f7d086e",
        "name": "TODO:",
        "info": "Groups onOff status are not updated \nwhen induvidual devices have their status\nchanged.\n\nHack fix for this is to that each time the\nstate of a device is changed, update \nthe global variable state of the device's\ngroup.",
        "x": 550,
        "y": 260,
        "wires": []
    },
    {
        "id": "42c920e8031cbe7c",
        "type": "debug",
        "z": "d117d1b62f7d086e",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 330,
        "y": 980,
        "wires": []
    },
    {
        "id": "b977ad43a25adb04",
        "type": "http in",
        "z": "d117d1b62f7d086e",
        "name": "/dashboard_old",
        "url": "/dashboard_old",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 980,
        "y": 380,
        "wires": [
            []
        ]
    },
    {
        "id": "67fd39a02f5fe012",
        "type": "function",
        "z": "d117d1b62f7d086e",
        "name": "getAndSortAllDevices",
        "func": "const formatGroups = (devices) => Object.keys(devices).reduce(\n    (prev, key) =>\n    ((devices[key].type === 'group' && devices[key].name !== 'SuperGroup') ? [\n        ...(prev || []),\n        {\n            key,\n            name: devices[key].name,\n            type: devices[key].type,\n            instanceId: devices[key].instanceId,\n            alive: devices[key].alive,\n            state: devices[key][devices[key].type] || { isOn: devices[key].isOn },\n            deviceIds: devices[key].deviceIds,\n        }]\n        : prev),\n    [],\n);\n\nconst formatDevices = (devices) => Object.keys(devices).reduce((prev, key) => ({\n    ...prev,\n    [devices[key].instanceId]: {\n        key,\n        name: devices[key].name,\n        type: devices[key].type,\n        instanceId: devices[key].instanceId,\n        alive: devices[key].alive,\n        state: devices[key][devices[key].type] || { isOn: devices[key].isOn },\n        deviceIds: devices[key].deviceIds,\n    }\n}), {});\n\nconst categorizeByDeviceType = (devices) =>\n    devices.reduce((prev, curr) => ({\n        ...prev,\n        [curr.type]: [\n            ...(prev[curr.type] || []),\n            curr,\n        ],\n    }), {});\n\nconst categorizeByGroup = (groups, devices) =>\n    groups.map((group) => ({\n        ...group,\n        devices: group.deviceIds.reduce(\n            (prev, deviceId) =>\n            ((devices[deviceId] && ['lightbulb', 'plug'].includes(devices[deviceId].type) ) ? [\n                ...prev,\n                devices[deviceId],\n            ] : prev),\n            [],\n        ),\n    }));\n\nfunction getAndSortAllDevices() {\n    const devices = global.get('globalDeviceList');\n    node.warn(devices)\n    const groups = formatGroups(devices);\n    const formattedDevices = formatDevices(devices);\n\n    // const categorizedDevices = categorizeByDeviceType(formattedDevices)\n    return categorizeByGroup(groups, formattedDevices);\n}\n\nreturn {\n    payload: getAndSortAllDevices(),\n    res: msg.res\n};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 660,
        "wires": [
            [
                "e4fa75504074f24d",
                "4311bdc226d30fc5"
            ]
        ]
    },
    {
        "id": "e4fa75504074f24d",
        "type": "debug",
        "z": "d117d1b62f7d086e",
        "name": "log",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 930,
        "y": 620,
        "wires": []
    },
    {
        "id": "fdc62ee56dd0312e",
        "type": "template",
        "z": "d117d1b62f7d086e",
        "name": "dashboard",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "{{=<% %>=}}\n\n<html lang=\"en\">\n  <head>\n    <title>Tradfri dashboard</title>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"initial-scale=1, width=device-width\" />\n    <script src=\"https://unpkg.com/react@latest/umd/react.development.js\" crossorigin=\"anonymous\"></script>\n    <script src=\"https://unpkg.com/react-dom@latest/umd/react-dom.development.js\"></script>\n    <script src=\"https://unpkg.com/@mui/material@latest/umd/material-ui.development.js\" crossorigin=\"anonymous\"></script>\n    <script src=\"https://unpkg.com/babel-standalone@latest/babel.min.js\" crossorigin=\"anonymous\"></script>\n    <!-- Fonts to support Material Design -->\n    <link rel=\"stylesheet\" href=\"https://fonts.googleapis.com/css?family=Roboto:300,400,500,700&display=swap\" />\n    <!-- Icons to support Material Design -->\n    <link rel=\"stylesheet\" href=\"https://fonts.googleapis.com/icon?family=Material+Icons\" />\n  </head>\n  <body>\n    <div id=\"root\"></div>\n    <script type=\"text/babel\">\n\nconst {\n  colors,\n  CssBaseline,\n  ThemeProvider,\n  Typography,\n  Container,\n  createTheme,\n  Box,\n  SvgIcon,\n  Link,\n  Button,\n  Card,\n  CardActions,\n  CardContent\n} = MaterialUI;\n\n// Create a theme instance.\nconst theme = createTheme({\n  palette: {\n    primary: {\n      main: '#556cd6',\n    },\n    secondary: {\n      main: '#19857b',\n    },\n    error: {\n      main: colors.red.A400,\n    },\n  },\n});\n<%={{ }}=%>\nconst data = {{{ payload }}}\n{{=<% %>=}}\nconsole.log(data)\n\n\nfunction LightBulbIcon(props) {\n  return (\n    <SvgIcon {...props}>\n      <path d=\"M9 21c0 .55.45 1 1 1h4c.55 0 1-.45 1-1v-1H9v1zm3-19C8.14 2 5 5.14 5 9c0 2.38 1.19 4.47 3 5.74V17c0 .55.45 1 1 1h6c.55 0 1-.45 1-1v-2.26c1.81-1.27 3-3.36 3-5.74 0-3.86-3.14-7-7-7zm2.85 11.1l-.85.6V16h-4v-2.3l-.85-.6C7.8 12.16 7 10.63 7 9c0-2.76 2.24-5 5-5s5 2.24 5 5c0 1.63-.8 3.16-2.15 4.1z\" />\n    </SvgIcon>\n  );\n}\n\nfunction ProTip() {\n  return (\n    <Typography sx={{ mt: 6, mb: 3 }} color=\"text.secondary\">\n      <LightBulbIcon sx={{ mr: 1, verticalAlign: 'top' }} />\n      Pro tip: See more{' '}\n      <Link href=\"https://mui.com/getting-started/templates/\">\n        templates\n      </Link>{' '}\n      on the MUI documentation.\n    </Typography>\n  );\n}\n\nfunction Copyright() {\n  return (\n    <Typography variant=\"body2\" color=\"text.secondary\" align=\"center\">\n      {'Copyright © '}\n      <Link color=\"inherit\" href=\"https://mui.com/\">\n        Your Website\n      </Link>{' '}\n      {new Date().getFullYear()}\n      {'.'}\n    </Typography>\n  );\n}\n\nconst DeviceCard = (props) => (\n    <Card sx={{ minWidth: 275 }}>\n      <CardContent>\n        <Typography sx={{ fontSize: 14 }} color=\"text.secondary\" gutterBottom>\n          Word of the Day\n        </Typography>\n        <Typography variant=\"h5\" component=\"div\">\n          {props.name}\n        </Typography>\n        <Typography sx={{ mb: 1.5 }} color=\"text.secondary\">\n          adjective\n        </Typography>\n        <Typography variant=\"body2\">\n          well meaning and kindly.\n          <br />\n          {'\"a benevolent smile\"'}\n        </Typography>\n      </CardContent>\n      <CardActions>\n        <Button size=\"small\">Learn More</Button>\n      </CardActions>\n    </Card>\n);\n\nconst GroupBox (props) => (\n  <Typography key={props.key} variant=\"h4\" component=\"h1\" gutterBottom>\n    {props.name}\n  </Typography>\n)\n\nfunction App() {\n  return (\n    <Container maxWidth=\"sm\">\n      <Box sx={{ my: 4 }}>\n        <Typography variant=\"h3\" component=\"h1\" gutterBottom>\n          Tradfri dashboard\n        </Typography>\n        {data.map((group) => {\n          return (<GroupBox key={group.key} props={group} />)\n        })}\n        <ProTip />\n        <Copyright />\n      </Box>\n    </Container>\n  );\n}\n\nReactDOM.render(\n    <ThemeProvider theme={theme}>\n      {/* CssBaseline kickstart an elegant, consistent, and simple baseline to build upon. */}\n      <CssBaseline />\n      <App />\n    </ThemeProvider>,\n  document.querySelector('#root'),\n);\n    </script>\n  </body>\n</html>\n<%={{ }}=%>",
        "output": "str",
        "x": 970,
        "y": 320,
        "wires": [
            []
        ]
    },
    {
        "id": "4311bdc226d30fc5",
        "type": "uibuilder",
        "z": "d117d1b62f7d086e",
        "name": "",
        "topic": "",
        "url": "dashboard",
        "fwdInMessages": false,
        "allowScripts": false,
        "allowStyles": false,
        "copyIndex": true,
        "templateFolder": "vue",
        "extTemplate": "",
        "showfolder": false,
        "useSecurity": false,
        "sessionLength": 432000,
        "tokenAutoExtend": false,
        "reload": false,
        "sourceFolder": "src",
        "x": 950,
        "y": 680,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "1abed18d4592f022",
        "type": "inject",
        "z": "d117d1b62f7d086e",
        "name": "poke",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 550,
        "y": 580,
        "wires": [
            [
                "67fd39a02f5fe012"
            ]
        ]
    },
    {
        "id": "d7b6dccd1d42e2c8",
        "type": "delay",
        "z": "d117d1b62f7d086e",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": true,
        "allowrate": false,
        "outputs": 1,
        "x": 510,
        "y": 680,
        "wires": [
            [
                "67fd39a02f5fe012"
            ]
        ]
    },
    {
        "id": "5321a58467d0e255",
        "type": "trigger",
        "z": "d117d1b62f7d086e",
        "name": "",
        "op1": "1",
        "op2": "0",
        "op1type": "str",
        "op2type": "str",
        "duration": "250",
        "extend": false,
        "overrideDelay": false,
        "units": "ms",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 180,
        "y": 800,
        "wires": [
            []
        ]
    },
    {
        "id": "b1c7433538b40c08",
        "type": "http in",
        "z": "1a8368cbbe1982c2",
        "name": "/pistatus",
        "url": "/pistatus",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 140,
        "y": 260,
        "wires": [
            [
                "aec6a6ac7dcfb2fb"
            ]
        ]
    },
    {
        "id": "8be8c824b3a1a597",
        "type": "http response",
        "z": "1a8368cbbe1982c2",
        "name": "",
        "statusCode": "200",
        "headers": {},
        "x": 660,
        "y": 220,
        "wires": []
    },
    {
        "id": "aec6a6ac7dcfb2fb",
        "type": "exec",
        "z": "1a8368cbbe1982c2",
        "command": "NOCOLOR=true ./Scripts/systemstatus",
        "addpay": "",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 400,
        "y": 260,
        "wires": [
            [
                "8be8c824b3a1a597",
                "7d3e34a3aa784db9"
            ],
            [
                "7d3e34a3aa784db9"
            ],
            [
                "7d3e34a3aa784db9"
            ]
        ]
    },
    {
        "id": "7d3e34a3aa784db9",
        "type": "debug",
        "z": "1a8368cbbe1982c2",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 650,
        "y": 260,
        "wires": []
    },
    {
        "id": "0ec389efe231462f",
        "type": "catch",
        "z": "1a8368cbbe1982c2",
        "name": "",
        "scope": null,
        "uncaught": false,
        "x": 140,
        "y": 460,
        "wires": [
            [
                "ec1fa2cf27e2a7ea"
            ]
        ]
    },
    {
        "id": "ec1fa2cf27e2a7ea",
        "type": "debug",
        "z": "1a8368cbbe1982c2",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 270,
        "y": 460,
        "wires": []
    },
    {
        "id": "2641ff882a36271e",
        "type": "status",
        "z": "1a8368cbbe1982c2",
        "name": "",
        "scope": null,
        "x": 140,
        "y": 500,
        "wires": [
            [
                "8809eb0acd5e381c"
            ]
        ]
    },
    {
        "id": "8809eb0acd5e381c",
        "type": "debug",
        "z": "1a8368cbbe1982c2",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 270,
        "y": 500,
        "wires": []
    },
    {
        "id": "3a85e836.06b698",
        "type": "comment",
        "z": "c54321938fa1bb97",
        "name": "uibuilder/Simple Example",
        "info": "[Front-End](/uib_simple)\n\nThis flow gets a \"quote of the day\" from the Internet and passes it\nto uibuilder. It caches the result so that if you reload the page,\nyou get the last result back. The quote is updated every 30 minutes\nduring the day and evening.\n\n\"Simple\" refers to the front-end code. While the flow looks a little\ncomplex, it really isn't. A trigger (repeating), an Internet request,\na cache and uibuilder. The link nodes loop the control output from\nuibuilder back to the cache.\n\n## Configuration\n\nUpdate the files:\n\n* `index.html`\n* `index.js`\n* `index.css`\n\nAccording to the example(s) in the 3 other comment nodes in this example.\n\nPress the button on the trigger to start the flow.",
        "x": 290,
        "y": 280,
        "wires": []
    },
    {
        "id": "7cf5c3b2.96006c",
        "type": "comment",
        "z": "c54321938fa1bb97",
        "name": "index.html",
        "info": "<!doctype html><html lang=\"en\"><head>\n    <meta charset=\"utf-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n\n    <title>uibuilder simple example</title>\n    <meta name=\"description\" content=\"Node-RED uibuilder - Simple example using VueJS\">\n\n    <link rel=\"icon\" href=\"./images/node-blue.ico\">\n\n    <!-- Put your own custom styles in here -->\n    <link rel=\"stylesheet\" href=\"./index.css\" media=\"all\">\n\n</head><body>\n    <!-- The \"app\" element is where the code for dynamic updates is attached -->\n\t<div id=\"app\">\n\t    <h1>A simple uibuilder page</h1>\n\t    <p>\n\t        The elements below are dynamically updated when you send\n\t        a msg to your uibuilder node.\n\t    </p>\n\t    \n\t    <div v-if=\"msg.payload\">\n\t        <h2>Quote of the Day</h2>\n\t        <blockquote>\n\t            <i>{{ msg.payload.quote.body }}</i>\n    \t        <div>{{ msg.payload.quote.author }}</div>\n\t        </blockquote>\n\t    </div>\n\t    \n\t    <h2>The full msg object</h2>\n\t\t<code>{{ msg }}</code>\n\t\t\n\t</div>\n\n    <!-- Vendor Libraries - Load in the right order -->\n    <script src=\"../uibuilder/vendor/socket.io/socket.io.js\"></script>\n    <script src=\"../uibuilder/vendor/vue/dist/vue.min.js\"></script>\n\n    <!-- REQUIRED: Sets up Socket listeners, the uibuilder and msg objects -->\n    <script src=\"./uibuilderfe.min.js\"></script>\n\n    <!-- Put your own custom code in here -->\n    <script src=\"./index.js\"></script>\n\n</body></html>",
        "x": 480,
        "y": 280,
        "wires": [],
        "icon": "node-red/parser-html.svg"
    },
    {
        "id": "8f8bfd94.685e6",
        "type": "comment",
        "z": "c54321938fa1bb97",
        "name": "index.js",
        "info": "/* jshint browser: true, esversion: 5, asi: true */\n/*globals uibuilder, Vue */\n// @ts-nocheck\n/*\n  Copyright (c) 2020 Julian Knight (Totally Information)\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n  http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n*/\n'use strict'\n\n/** @see https://github.com/TotallyInformation/node-red-contrib-uibuilder/wiki/Front-End-Library---available-properties-and-methods */\n\nvar app1 = new Vue({\n    // The HTML element to attach to\n\tel: '#app',\n\t/** Pre-defined data\n\t *  Anything defined here can be used in the HTML\n\t *  if you update it, the HTML will automatically update\n\t */\n\tdata: {\n\t\tmsg: '[Nothing Recieved Yet]',\n\t},\n\n    // Called after the Vue app has been created. A good place to put startup code\n    created: function() {\n        // **REQUIRED** Start uibuilder comms with Node-RED\n        uibuilder.start()\n    },\n\n    // Called when Vue is fully loaded\n\tmounted: function() {\n\t\t// Keep a convenient reference to the Vue app\n\t\tvar vueApp = this\n\n        /** Triggered when the node on the Node-RED server\n         *  recieves a (non-control) msg\n         */\n\t\tuibuilder.onChange('msg', function(msg) {\n\t\t\tvueApp.msg = msg\n\t\t})\n\n\t\t// Send message back to node-red\n\t\t// uibuilder.send({payload:'some message'})\n\t},\n\t\n}) // --- End of the Vue app definition --- //\n\n// EOF",
        "x": 610,
        "y": 280,
        "wires": [],
        "icon": "font-awesome/fa-code"
    },
    {
        "id": "8a35b840.a3b2d8",
        "type": "comment",
        "z": "c54321938fa1bb97",
        "name": "index.css",
        "info": "body {font-family: sans-serif; font-size: 120%;}\ndiv, p, code { margin:0.3em; padding: 0.3em;}\n\nblockquote i {\n    font-size: 1.5em; color:grey; font-style: italic;\n}",
        "x": 740,
        "y": 280,
        "wires": [],
        "icon": "node-red/hash.svg"
    },
    {
        "id": "2cf3f051.3dd33",
        "type": "debug",
        "z": "c54321938fa1bb97",
        "name": "simple-debug",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 800,
        "y": 320,
        "wires": []
    },
    {
        "id": "eb95241.bca25d8",
        "type": "uibuilder",
        "z": "c54321938fa1bb97",
        "name": "Simple Example",
        "topic": "",
        "url": "uib_simple",
        "fwdInMessages": false,
        "allowScripts": false,
        "allowStyles": false,
        "copyIndex": true,
        "templateFolder": "blank",
        "extTemplate": "",
        "showfolder": false,
        "useSecurity": false,
        "sessionLength": "",
        "tokenAutoExtend": false,
        "reload": false,
        "sourceFolder": "src",
        "x": 590,
        "y": 340,
        "wires": [
            [
                "2cf3f051.3dd33"
            ],
            [
                "4e7c2860.c5c318"
            ]
        ]
    },
    {
        "id": "70cf5aa5.9b03c4",
        "type": "inject",
        "z": "c54321938fa1bb97",
        "name": "",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "",
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 210,
        "y": 340,
        "wires": [
            [
                "dcbb878b.7de8c8"
            ]
        ]
    },
    {
        "id": "4e7c2860.c5c318",
        "type": "debug",
        "z": "c54321938fa1bb97",
        "name": "uib controls",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 790,
        "y": 360,
        "wires": []
    },
    {
        "id": "16169222.b4d91e",
        "type": "debug",
        "z": "c54321938fa1bb97",
        "name": "qod-debug",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 590,
        "y": 420,
        "wires": []
    },
    {
        "id": "dcbb878b.7de8c8",
        "type": "http request",
        "z": "c54321938fa1bb97",
        "name": "Quote of the day",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "https://favqs.com/api/qotd",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 370,
        "y": 340,
        "wires": [
            [
                "eb95241.bca25d8",
                "16169222.b4d91e"
            ]
        ]
    },
    {
        "id": "dbb0bd8f.7242a",
        "type": "uibuilder",
        "z": "7827694ff4b0dc7d",
        "name": "demo",
        "topic": "",
        "url": "demo",
        "fwdInMessages": false,
        "allowScripts": false,
        "allowStyles": false,
        "copyIndex": true,
        "templateFolder": "vue",
        "extTemplate": "",
        "showfolder": false,
        "useSecurity": false,
        "sessionLength": "",
        "tokenAutoExtend": false,
        "reload": true,
        "sourceFolder": "src",
        "x": 510,
        "y": 300,
        "wires": [
            [],
            []
        ]
    }
]