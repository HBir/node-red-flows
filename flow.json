[
    {
        "id": "d117d1b62f7d086e",
        "type": "tab",
        "label": "Tradfri",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "1a8368cbbe1982c2",
        "type": "tab",
        "label": "Pi status",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "b2fb63b9d77e15a7",
        "type": "tradfri-config",
        "name": "tradfri config",
        "gatewayHost": "10.1.0.36",
        "identity": "tradfri_1645005107424",
        "preSharedKey": "TTtltDuaoNFmlZHX"
    },
    {
        "id": "3ea589fd2b313663",
        "type": "catch",
        "z": "d117d1b62f7d086e",
        "name": "",
        "scope": null,
        "uncaught": false,
        "x": 200,
        "y": 780,
        "wires": [
            [
                "04c6ca6dc91092d7"
            ]
        ]
    },
    {
        "id": "04c6ca6dc91092d7",
        "type": "debug",
        "z": "d117d1b62f7d086e",
        "name": "log",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 330,
        "y": 780,
        "wires": []
    },
    {
        "id": "f28bc0dc4af57029",
        "type": "status",
        "z": "d117d1b62f7d086e",
        "name": "",
        "scope": null,
        "x": 200,
        "y": 840,
        "wires": [
            [
                "42c920e8031cbe7c"
            ]
        ]
    },
    {
        "id": "94f9e5ca27ce82c1",
        "type": "http in",
        "z": "d117d1b62f7d086e",
        "name": "/tradfri/:device",
        "url": "/tradfri/:device",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 360,
        "y": 500,
        "wires": [
            [
                "039b8253b7696f59"
            ]
        ]
    },
    {
        "id": "7928829e1332e137",
        "type": "inject",
        "z": "d117d1b62f7d086e",
        "name": "Mirror lamps",
        "props": [
            {
                "p": "req.params",
                "v": "{\"device\": \"Mirror lamps\"}",
                "vt": "json"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 350,
        "y": 380,
        "wires": [
            [
                "039b8253b7696f59"
            ]
        ]
    },
    {
        "id": "6ea96e84ddc1fb55",
        "type": "tradfri-monitor",
        "z": "d117d1b62f7d086e",
        "gateway": "b2fb63b9d77e15a7",
        "name": "",
        "x": 570,
        "y": 780,
        "wires": [
            [
                "0768e54ac65e1ea0"
            ]
        ]
    },
    {
        "id": "4725435ee8826d82",
        "type": "debug",
        "z": "d117d1b62f7d086e",
        "name": "log",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 950,
        "y": 780,
        "wires": []
    },
    {
        "id": "0768e54ac65e1ea0",
        "type": "function",
        "z": "d117d1b62f7d086e",
        "name": "updateDeviceList",
        "func": "try {\n    const globalDeviceList = {};\n    const name = msg.payload.name.toLowerCase()\n    globalDeviceList[name] = msg.payload\n\n    const newList = {\n        ...global.get(\"globalDeviceList\") || {},\n        ...globalDeviceList\n    }\n\n\n    global.set(\"globalDeviceList\", newList);\n    return { msg, deviceList: newList };\n} catch (err) {\n    node.error(err)\n    return {msg, err}\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 770,
        "y": 780,
        "wires": [
            [
                "4725435ee8826d82"
            ]
        ]
    },
    {
        "id": "77f2a35b96e8c937",
        "type": "function",
        "z": "d117d1b62f7d086e",
        "name": "clearDeviceList",
        "func": "global.set(\"globalDeviceList\", undefined);\nreturn {info: \"Cleared globalDeviceList\"}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 760,
        "y": 840,
        "wires": [
            [
                "8974dc3c7d79bbde"
            ]
        ]
    },
    {
        "id": "8974dc3c7d79bbde",
        "type": "debug",
        "z": "d117d1b62f7d086e",
        "name": "log",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 950,
        "y": 840,
        "wires": []
    },
    {
        "id": "039b8253b7696f59",
        "type": "function",
        "z": "d117d1b62f7d086e",
        "name": "findAndToggle",
        "func": "function escapeRegExp(string) {\n    return string.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'); // $& means the whole matched string\n}\n\nfunction replaceAll(str, find, replace) {\n    return str.replace(new RegExp(escapeRegExp(find), 'g'), replace);\n}\n\nconst trimCommandString = (id) => ((id === 'all')\n    ? '' : replaceAll(id.replace(/the/g, '').trim().toLowerCase(), '_', ' '));\n\nconst toggle = (isOn) => (isOn ? \"off\" : \"on\")\n\nconst getIsOn = (deviceInfo, type) => ((type === 'group') ? deviceInfo.isOn : deviceInfo[type].isOn)\n\nfunction findAndToggle (input) {\n    const device = trimCommandString(\n        input.req.params.device.toLowerCase()\n    )\n    const deviceList = global.get(\"globalDeviceList\")\n    const deviceInfo = deviceList[device];\n    // node.warn(deviceList);\n    // node.warn(deviceInfo);\n\n    const type = deviceInfo.type\n    const isOn = getIsOn(deviceInfo, type)\n\n    return {\n        topic: deviceInfo.instanceId,\n        payload: toggle(isOn),\n        res: input.res\n    };\n}\n\ntry {\n    return findAndToggle(msg);\n} catch (err) {\n    node.error(err)\n    return {\n        payload: err.message,\n        res: msg.res,\n        statusCode: 500\n    }\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 560,
        "y": 500,
        "wires": [
            [
                "2e2c00ca72610f7c",
                "90b5126edab69b36",
                "69cec7f12a58fcb1"
            ]
        ]
    },
    {
        "id": "2e2c00ca72610f7c",
        "type": "debug",
        "z": "d117d1b62f7d086e",
        "name": "log",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 730,
        "y": 560,
        "wires": []
    },
    {
        "id": "039a1cb7fbd844db",
        "type": "inject",
        "z": "d117d1b62f7d086e",
        "name": "atFlowStart",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 570,
        "y": 840,
        "wires": [
            [
                "77f2a35b96e8c937"
            ]
        ]
    },
    {
        "id": "90b5126edab69b36",
        "type": "tradfri-switch-control",
        "z": "d117d1b62f7d086e",
        "gateway": "b2fb63b9d77e15a7",
        "name": "Update tradfri",
        "action": "",
        "accessories": [],
        "groups": [],
        "logInputErrors": true,
        "x": 760,
        "y": 500,
        "wires": []
    },
    {
        "id": "3bdafeedf173a283",
        "type": "inject",
        "z": "d117d1b62f7d086e",
        "name": "the_tall_sofa_lamp",
        "props": [
            {
                "p": "req.params",
                "v": "{\"device\": \"tall sofa lamp\"}",
                "vt": "json"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 330,
        "y": 340,
        "wires": [
            [
                "039b8253b7696f59"
            ]
        ]
    },
    {
        "id": "bb9e3ac33d04a87a",
        "type": "inject",
        "z": "d117d1b62f7d086e",
        "name": "living room",
        "props": [
            {
                "p": "req.params",
                "v": "{\"device\": \"living room\"}",
                "vt": "json"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 360,
        "y": 300,
        "wires": [
            [
                "039b8253b7696f59"
            ]
        ]
    },
    {
        "id": "69cec7f12a58fcb1",
        "type": "http response",
        "z": "d117d1b62f7d086e",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 730,
        "y": 440,
        "wires": []
    },
    {
        "id": "7a86746dfb115e20",
        "type": "comment",
        "z": "d117d1b62f7d086e",
        "name": "Debug nodes",
        "info": "",
        "x": 350,
        "y": 260,
        "wires": []
    },
    {
        "id": "4fd61c70026094f7",
        "type": "comment",
        "z": "d117d1b62f7d086e",
        "name": "TODO:",
        "info": "Groups onOff status are not updated \nwhen induvidual devices have their status\nchanged.\n\nHack fix for this is to that each time the\nstate of a device is changed, update \nthe global variable state of the device's\ngroup.",
        "x": 570,
        "y": 420,
        "wires": []
    },
    {
        "id": "42c920e8031cbe7c",
        "type": "debug",
        "z": "d117d1b62f7d086e",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 330,
        "y": 840,
        "wires": []
    },
    {
        "id": "b977ad43a25adb04",
        "type": "http in",
        "z": "d117d1b62f7d086e",
        "name": "/dashboard",
        "url": "/dashboard",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 350,
        "y": 660,
        "wires": [
            [
                "67fd39a02f5fe012"
            ]
        ]
    },
    {
        "id": "67fd39a02f5fe012",
        "type": "function",
        "z": "d117d1b62f7d086e",
        "name": "getAndSortAllDevices",
        "func": "const formatGroups = (devices) => Object.keys(devices).reduce((prev, key) => {\n    if (devices[key].type === 'group') {\n        return [\n            {\n                key,\n                name: devices[key].name,\n                type: devices[key].type,\n                instanceId: devices[key].instanceId,\n                alive: devices[key].alive,\n                state: devices[key][devices[key].type] || { isOn: devices[key].isOn },\n                deviceIds: devices[key].deviceIds\n            },\n            ...prev]\n    } else {\n        return []\n    }\n}, []);\n\nconst formatDevices = (devices) => Object.keys(devices).reduce((prev, key) => ({\n    [devices[key].instanceId]: {\n        key,\n        name: devices[key].name,\n        type: devices[key].type,\n        instanceId: devices[key].instanceId,\n        alive: devices[key].alive,\n        state: devices[key][devices[key].type] || { isOn: devices[key].isOn },\n        deviceIds: devices[key].deviceIds\n    },\n    ...prev,\n}), {});\n\n\nconst categorizeByDeviceType = (devices) =>\n    devices.reduce((prev, curr) => ({\n        ...prev,\n        [curr.type]: [\n            ...(prev[curr.type] || []),\n            curr\n        ],\n    }), {});\n\nconst categorizeByGroup = (groups, devices) =>\n    groups.map((group) => ({\n        ...group,\n        devices: group.deviceIds.map((deviceId) => devices[deviceId]),\n    }));\n\n\n\nfunction getAndSortAllDevices() {\n    const devices = global.get(\"globalDeviceList\")\n    node.warn(devices)\n    const groups = formatGroups(devices)\n    const formattedDevices = formatDevices(devices)\n     \n    //const categorizedDevices = categorizeByDeviceType(formattedDevices)\n    return categorizeByGroup(groups, formattedDevices)\n}\n\nreturn {\n    payload: getAndSortAllDevices(),\n    res: msg.res\n};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 580,
        "y": 660,
        "wires": [
            [
                "e4fa75504074f24d",
                "fdc62ee56dd0312e"
            ]
        ]
    },
    {
        "id": "bbb68f349ccc4640",
        "type": "http response",
        "z": "d117d1b62f7d086e",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 930,
        "y": 660,
        "wires": []
    },
    {
        "id": "e4fa75504074f24d",
        "type": "debug",
        "z": "d117d1b62f7d086e",
        "name": "log",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 750,
        "y": 620,
        "wires": []
    },
    {
        "id": "fdc62ee56dd0312e",
        "type": "template",
        "z": "d117d1b62f7d086e",
        "name": "dashboard",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "<h3>Groups</h3>\n{{#payload}}\n  <h4>{{name}}</h4>\n  {{devices}}\n{{/payload}}\n",
        "output": "str",
        "x": 770,
        "y": 660,
        "wires": [
            [
                "bbb68f349ccc4640"
            ]
        ]
    },
    {
        "id": "b1c7433538b40c08",
        "type": "http in",
        "z": "1a8368cbbe1982c2",
        "name": "/pistatus",
        "url": "/pistatus",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 140,
        "y": 260,
        "wires": [
            [
                "aec6a6ac7dcfb2fb"
            ]
        ]
    },
    {
        "id": "8be8c824b3a1a597",
        "type": "http response",
        "z": "1a8368cbbe1982c2",
        "name": "",
        "statusCode": "200",
        "headers": {},
        "x": 660,
        "y": 220,
        "wires": []
    },
    {
        "id": "aec6a6ac7dcfb2fb",
        "type": "exec",
        "z": "1a8368cbbe1982c2",
        "command": "NOCOLOR=true ./Scripts/systemstatus",
        "addpay": "",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 400,
        "y": 260,
        "wires": [
            [
                "8be8c824b3a1a597",
                "7d3e34a3aa784db9"
            ],
            [
                "7d3e34a3aa784db9"
            ],
            [
                "7d3e34a3aa784db9"
            ]
        ]
    },
    {
        "id": "7d3e34a3aa784db9",
        "type": "debug",
        "z": "1a8368cbbe1982c2",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 650,
        "y": 260,
        "wires": []
    },
    {
        "id": "0ec389efe231462f",
        "type": "catch",
        "z": "1a8368cbbe1982c2",
        "name": "",
        "scope": null,
        "uncaught": false,
        "x": 140,
        "y": 460,
        "wires": [
            [
                "ec1fa2cf27e2a7ea"
            ]
        ]
    },
    {
        "id": "ec1fa2cf27e2a7ea",
        "type": "debug",
        "z": "1a8368cbbe1982c2",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 270,
        "y": 460,
        "wires": []
    },
    {
        "id": "2641ff882a36271e",
        "type": "status",
        "z": "1a8368cbbe1982c2",
        "name": "",
        "scope": null,
        "x": 140,
        "y": 500,
        "wires": [
            [
                "8809eb0acd5e381c"
            ]
        ]
    },
    {
        "id": "8809eb0acd5e381c",
        "type": "debug",
        "z": "1a8368cbbe1982c2",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 270,
        "y": 500,
        "wires": []
    }
]